/*******************************************************************************
 * Copyright (c) 2024 École Polytechnique de Montréal
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License 2.0 which
 * accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 *******************************************************************************/
package org.eclipse.tracecompass.incubator.rocm.core.ctfplugin.trace;

import java.util.Collection;
import java.util.List;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.tracecompass.incubator.gpu.core.trace.IGpuTraceEventLayout;
import org.eclipse.tracecompass.tmf.core.event.ITmfEvent;

import com.google.common.collect.ImmutableList;

/**
 * Event layout for GPU events in traces generated by the CTF plugin in ROCm
 *
 * @author Arnaud Fiorini
 */
public class RocmCtfPluginTraceEventLayout implements IGpuTraceEventLayout {

    /** Suffix for all events */
    public static final String BEGIN_SUFFIX = "_start"; //$NON-NLS-1$
    /** HIP Compiler string */
    public static final String HIP_COMPILER = "hip_compiler_region"; //$NON-NLS-1$
    /** HIP Runtime string */
    public static final String HIP_RUNTIME = "hip_runtime_region"; //$NON-NLS-1$
    /** HSA Core string */
    public static final String HSA_CORE = "hsa_core_region"; //$NON-NLS-1$
    /** HSA AMD EXT string */
    public static final String HSA_AMD_EXT = "hsa_amd_ext_region"; //$NON-NLS-1$
    /** Marker Core string */
    public static final String MARKER_CORE = "marker_core_region"; //$NON-NLS-1$
    /** Memory Copy string */
    public static final String MEM_COPY = "memory_copy_event"; //$NON-NLS-1$
    /** Memory Allocation string */
    public static final String MEM_ALLOC = "memory_allocation_event"; //$NON-NLS-1$
    /** Kernel Dispatch string */
    public static final String KERNEL_DISPATCH = "kernel_dispatch_event"; //$NON-NLS-1$
    /** Counter Collection string */
    public static final String COUNTER_COLLECTION = "counter_collection_event"; //$NON-NLS-1$


    private static @Nullable RocmCtfPluginTraceEventLayout INSTANCE;
    private static List<IApiEventLayout> fApiLayouts = ImmutableList.of(
            new HipCompilerApiEventLayout(),
            new HipRuntimeApiEventLayout(),
            new HsaCoreApiEventLayout(),
            new HsaAmdExtApiEventLayout(),
            new MarkerCoreApiEventLayout(),
            new GenericApiEventLayout(),
            new UnknownApiEventLayout());

    /**
     * The instance of this event layout
     * <p>
     * This object is completely immutable, so no need to create additional
     * instances via the constructor.
     *
     * @return the instance
     */
    public static synchronized RocmCtfPluginTraceEventLayout getInstance() {
        RocmCtfPluginTraceEventLayout instance = INSTANCE;
        if (instance == null) {
            instance = new RocmCtfPluginTraceEventLayout();
            INSTANCE = instance;
        }
        return instance;
    }

    @Override
    public @NonNull Collection<IApiEventLayout> getApiLayouts() {
        return fApiLayouts;
    }

    @Override
    public @NonNull IApiEventLayout getCorrespondingApiLayout(ITmfEvent event) {
//        if (event.getName().startsWith(HIP_COMPILER)) {
//            return fApiLayouts.get(0);
//        } else if (event.getName().startsWith(HIP_RUNTIME)) {
//            return fApiLayouts.get(1);
//        } else if (event.getName().startsWith(HSA_CORE)) {
//            return fApiLayouts.get(2);
//        } else if (event.getName().startsWith(HSA_AMD_EXT)) {
//            return fApiLayouts.get(3);
//        } else if (event.getName().startsWith(MARKER_CORE)) {
//            return fApiLayouts.get(4);
//        }
//        return fApiLayouts.getLast();
        return fApiLayouts.get(5);
    }

    @Override
    public boolean isMemcpy(ITmfEvent event) {
        return event.getName().startsWith(MEM_COPY);
    }

    @Override
    public boolean isMemAlloc(ITmfEvent event) {
        return event.getName().startsWith(MEM_ALLOC);
    }

    @Override
    public boolean isCounterCollection(ITmfEvent event) {
        return event.getName().startsWith(COUNTER_COLLECTION);
    }

    @Override
    public boolean isKernelDispatch(ITmfEvent event) {
        return event.getName().startsWith(KERNEL_DISPATCH);
    }

    @Override
    public boolean isApiEvent(ITmfEvent event) {
        return !(isMemcpy(event) || isKernelDispatch(event) || isMemAlloc(event) || isCounterCollection(event));
    }

    @Override
    public @NonNull String fieldThreadId() {
        return "tid"; //$NON-NLS-1$
    }

    @Override
    public @NonNull String fieldDuration() {
        return ""; //$NON-NLS-1$
    }

    /**
     * Event layout for HIP Compiler API events
     */
    public static class HipCompilerApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "HIP Compiler"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for HIP Compiler API events
     */
    public static class HipRuntimeApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "HIP Runtime"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for HSA Core API events
     */
    public static class HsaCoreApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "HSA Core"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for HSA AMD EXT API events
     */
    public static class HsaAmdExtApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "HSA AMD Extension"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for Marker Core API events
     */
    public static class MarkerCoreApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "Marker Core"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for Generic API events
     */
    public static class GenericApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "API Trace"; //$NON-NLS-1$
        }
    }

    /**
     * Event layout for Unknown API events
     */
    public static class UnknownApiEventLayout extends RocmApiCtfPluginEventLayout {
        @Override
        public String getApiName() {
            return "Unknown"; //$NON-NLS-1$
        }
    }

}
